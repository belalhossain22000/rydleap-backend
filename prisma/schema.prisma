generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// otp model 
model OTP {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String   @unique
  otpCode     String
  expiry      DateTime
}

// User model
model User {
  id                     String             @id @default(auto()) @map("_id") @db.ObjectId
  fullName               String
  profileImage           String?
  email                  String             @unique
  phoneNumber            String?
  isPhoenVerified        Boolean            @default(false)
  password               String?
  fcpmToken              String?
  customerId             String?
  role                   UserRole           @default(USER)
  status                 UserStatus         @default(INACTIVE)
  isOnline               Boolean?           @default(false)
  isDeleted              Boolean            @default(false)
  isAvailable            Boolean?           @default(true)
  totalBalance           Int                @default(0)
  cashout                Int                @default(0)
  otp                    String?
  otpExpiresAt           DateTime?
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  riderVehicleInfo       RiderVehicleInfo?
  locations              UserLocation?      @relation("UserLocation")
  ridesAsCustomer        Ride?              @relation("RidesAsCustomer")
  ridesAsRider           Ride?              @relation("RidesAsRider")
  riderReviewsAsRider    RiderReview?       @relation("RiderReviewsAsRider")
  riderReviewsAsCustomer RiderReview?       @relation("RiderReviewsAsCustomer")
  rydleapProfile         RydleapProfile[]
  userTransactions       UserTransaction[]
  riderTransactions      RiderTransaction[]
  paymentInfo            PaymentInfo[]
  paymentMethod          PaymentMethod[]
  notifications          Notifications[]
  riderPayout            RiderPayout[]

  @@map("Users")
}

model UserTransaction {
  id              String        @id @default(auto()) @map("_id") @db.ObjectId
  amount          Int
  userId          String?       @db.ObjectId
  rideId          String?       @db.ObjectId
  riderId         String?       @db.ObjectId
  orderId         String?
  url             String?
  status          PaymentStatus @default(PENDING)
  paymentMethod   String
  transactionType String        @default("Ride Fare")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User?         @relation(fields: [userId], references: [id])
  ride            Ride?         @relation(fields: [rideId], references: [id])

  @@map("UserTransactions")
}

model PaymentInfo {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  cardNumber     Int
  cardHolderName String?
  cvv            Int
  expirationDate String
  country        String
  userId         String?  @db.ObjectId
  paymentMethod  String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User?    @relation(fields: [userId], references: [id])

  @@map("paymentInfo")
}

model PaymentMethod {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String?  @db.ObjectId
  paymentMethod    String   @unique
  paymentMethodImg String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User?    @relation(fields: [userId], references: [id])

  @@map("paymentMethods")
}

model RiderTransaction {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  amount        Int
  riderId       String?       @db.ObjectId
  rideId        String?       @db.ObjectId
  userId        String?       @db.ObjectId
  orderId       String?       @db.ObjectId
  status        PaymentStatus @default(PENDING)
  paymentMethod String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  rider         User?         @relation(fields: [riderId], references: [id])
  ride          Ride?         @relation(fields: [rideId], references: [id])

  @@map("RiderTransactions")
}

model Ride {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  userId           String?            @unique @db.ObjectId
  riderId          String?            @unique @db.ObjectId
  fare             Int
  pickupLat        Float
  pickupLng        Float
  destinationLat   Float
  destinationLng   Float
  date             String?
  time             String?
  packageId        String?            @db.ObjectId
  status           RideStatus         @default(PENDING)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  package          Package?           @relation(fields: [packageId], references: [id])
  user             User?              @relation("RidesAsCustomer", fields: [userId], references: [id])
  rider            User?              @relation("RidesAsRider", fields: [riderId], references: [id])
  RiderReview      RiderReview[]
  userTransaction  UserTransaction[]
  riderTransaction RiderTransaction[]

  @@map("Rides")
}

model RiderReview {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  rideId     String?  @db.ObjectId
  riderId    String?  @unique @db.ObjectId
  customerId String?  @unique @db.ObjectId
  rating     Int
  comment    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ride       Ride?    @relation(fields: [rideId], references: [id])
  rider      User?    @relation("RiderReviewsAsRider", fields: [riderId], references: [id])
  customer   User?    @relation("RiderReviewsAsCustomer", fields: [customerId], references: [id])

  @@map("RiderReviews")
}

// user location table
model UserLocation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String?  @unique @db.ObjectId
  locationLat Float
  locationLng Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation("UserLocation", fields: [userId], references: [id])

  @@map("usersLocations")
}

// package table
model Package {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String   @unique
  price     String
  minutes   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rides     Ride[]

  @@map("Packages")
}

// rider vehicle info table
model RiderVehicleInfo {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  vehicleMake               String
  vehicleModel              String
  vehicleYear               String
  vehicleColor              String
  vehicleLicensePlateNumber String
  vehicleRegistrationImage  Json
  vehicleInsuranceImage     Json
  drivingLicenceImage       Json
  userId                    String?  @unique @db.ObjectId
  user                      User?    @relation(fields: [userId], references: [id])
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  @@map("RiderVehicleInfos")
}

model Offer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  subTitle  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("Offers")
}

model RydleapProfile {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  adminId         String?  @db.ObjectId
  admin           User?    @relation(fields: [adminId], references: [id])
  supportEmail    String
  phoneNumber     String
  address         String
  currency        String
  defaultLanguage String
  fullName        String
  logo            Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("RydleapProfiles")
}

model Notifications {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  receiverId String?  @db.ObjectId
  title      String
  body       String
  read       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?    @relation(fields: [receiverId], references: [id])
}

model RiderPayout {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  riderId       String?      @db.ObjectId
  amount        Int
  paymentMethod String
  status        PayoutStatus @default(PROCESSED)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  user          User?        @relation(fields: [riderId], references: [id])

  @@map("riderPayouts")
}

model Invoice {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNo      String
  issueDate      DateTime
  dueDate        DateTime
  invoiceTerms   String
  billingAddress String
  paymentMethod  String
  email          String
  items          Json
  totalAmount    Float
  name           String?
  perday         Float         @default(0.00)
  note           String?
  status         InvoiceStatus @default(PAID)
}

enum UserRole {
  ADMIN
  RIDER
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
  AVAILABLE
  UNAVAILABLE
  ON_RIDE
}

enum RideStatus {
  PENDING
  ACCEPTED
  DECLINED
  REJECTED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  COMPLETED
  PENDING
}

enum PayoutStatus {
  COMPLETED
  PROCESSED
}

enum InvoiceStatus {
  PAID
  UNPAID
  OVERDUE
}
